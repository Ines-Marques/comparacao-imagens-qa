import cv2  # OpenCV para carregar e manipular imagens
import os   # Para opera√ß√µes com o sistema de ficheiros (cria√ß√£o de pastas, caminhos)
import time # Para medi√ß√£o de tempo de execu√ß√£o dos m√©todos e tempo total
import uuid # Para gera√ß√£o de identificadores √∫nicos para cada sess√£o de an√°lise

# Importa√ß√£o de fun√ß√µes do m√≥dulo de gera√ß√£o de relat√≥rios
from output.relatorio import guardar_imagem_resultado, gerar_relatorio_pdf_multimetodo

# Importa√ß√£o de fun√ß√µes do m√≥dulo de an√°lise de diferen√ßas
from processamento.analises import analisar_diferencas

# Lista de m√©todos de an√°lise a aplicar sequencialmente
metodos_analise = ["absdiff", "histograma", "ssim"]

# Definir caminhos das imagens de refer√™ncia e de teste
# IMG_NOME: Nome do ficheiro de imagem a analisar (deve existir em ambas as pastas)
IMG_NOME = "menu.png"

# Constr√≥i caminhos completos para as imagens usando os.path.join()
# Garante compatibilidade entre sistemas operativos
IMG_REFERENCIA = os.path.join("imagens", "referencia", IMG_NOME)
IMG_TESTE = os.path.join("imagens", "teste", IMG_NOME)

# Carregar imagens pelo OpenCV
# cv2.imread() retorna array com dados da imagem ou None se falhar
img_ref = cv2.imread(IMG_REFERENCIA)
img_teste = cv2.imread(IMG_TESTE)

# Verifica se ambas as imagens foram carregadas corretamente
# Falha pode ocorrer por: ficheiro inexistente, formato inv√°lido
if img_ref is None:
    print(f"‚ùå Imagem de refer√™ncia n√£o encontrada: {IMG_REFERENCIA}")
    exit(1)

if img_teste is None:
    print(f"‚ùå Imagem de teste n√£o encontrada: {IMG_TESTE}")
    exit(1)

# Verifica se as imagens t√™m o mesmo tamanho (altura, largura)
# Compara√ß√£o direta s√≥ √© poss√≠vel com dimens√µes id√™nticas
if img_ref.shape != img_teste.shape:
    print("‚ùå As imagens t√™m tamanhos diferentes e n√£o podem ser comparadas diretamente.")
    exit(1)

# Gera identificador √∫nico para esta sess√£o de an√°lise
id_relatorio = str(uuid.uuid4())[:8]

# Inicia contagem do tempo total de execu√ß√£o
# Permite medir performance geral do sistema de an√°lise
inicio_global = time.time()

# Lista para guardar resultados de cada m√©todo aplicado
# Cada elemento ser√° um dicion√°rio com:
# - metodo: nome do m√©todo usado
# - tipo_analise: descri√ß√£o textual do m√©todo
# - metricas: valores quantitativos calculados
# - imagem_resultado: caminho da imagem com diferen√ßas destacadas
# - duracao: tempo de execu√ß√£o espec√≠fico deste m√©todo
resultados = []

# Executa cada m√©todo de an√°lise sequencialmente
for metodo in metodos_analise:
    print(f"\nüîé A executar m√©todo: {metodo}")

    # Marca in√≠cio da execu√ß√£o deste m√©todo espec√≠fico
    # Permite medir performance individual de cada algoritmo
    inicio = time.time()

    # Retorna a imagem com diferen√ßas destacadas, descri√ß√£o do tipo, m√©tricas calculadas
    img_resultado, tipo_analise, metricas = analisar_diferencas(img_ref, img_teste, metodo=metodo)

    # Calcula tempo decorrido para este m√©todo
    duracao = time.time() - inicio

    # Inicializa caminho do resultado como None
    # S√≥ alguns m√©todos geram imagens de resultado visual
    caminho_resultado = None

    # Guarda imagem de resultado apenas para m√©todos que geram visualiza√ß√µes
    # "absdiff" e "ssim" criam imagens com diferen√ßas destacadas visualmente
    # "histograma" √© an√°lise estat√≠stica sem componente visual
    if metodo in ["absdiff", "ssim"]:
        caminho_resultado = guardar_imagem_resultado(img_resultado, metodo=metodo, identificador=id_relatorio)

    # Adiciona resultado deste m√©todo √† lista de resultados
    resultados.append({
        "metodo": metodo,                           # Nome do m√©todo aplicado
        "tipo_analise": tipo_analise,               # Descri√ß√£o textual do m√©todo
        "metricas": metricas,                       # Dicion√°rio com valores calculados
        "imagem_resultado": caminho_resultado,      # Caminho da imagem
        "duracao": duracao                          # Tempo de execu√ß√£o em segundos
    })

# Calcula tempo total de execu√ß√£o de todos os m√©todos
duracao_total = time.time() - inicio_global

# Gera o relat√≥rio PDF com todos os resultados
# Par√¢metros:
# - img_ref_path: caminho da imagem de refer√™ncia
# - img_teste_path: caminho da imagem de teste
# - resultados: lista completa com resultados de todos os m√©todos
# - identificador: ID √∫nico desta sess√£o
# - duracao_total: tempo total de execu√ß√£o
gerar_relatorio_pdf_multimetodo(
    img_ref_path = IMG_REFERENCIA,
    img_teste_path = IMG_TESTE,
    resultados = resultados,
    identificador = id_relatorio,
    duracao_total = duracao_total
)

# Mostra a imagem de resultado do √∫ltimo m√©todo executado, se existir
# Permite visualiza√ß√£o imediata do resultado final
if resultados:
    # Obt√©m o resultado do √∫ltimo m√©todo na lista
    ultima = resultados[-1]
    img_mostrar = None

    # Se o √∫ltimo m√©todo gerou imagem de resultado, carrega-a
    if ultima["imagem_resultado"]:
        img_mostrar = cv2.imread(ultima["imagem_resultado"])
    else:
        # Caso contr√°rio, mostra a imagem de teste original
        # Acontece quando o √∫ltimo m√©todo √© "histograma" (sem componente visual)
        img_mostrar = img_teste

    # Confirma se a imagem foi carregada com sucesso antes de mostrar
    if img_mostrar is not None:
        # cv2.imshow() abre a janela com a imagem
        # o t√≠tulo da janela indica que s√£o as diferen√ßas do √∫ltimo m√©todo
        cv2.imshow("√öltimo Resultado de Diferen√ßas Detetadas", img_mostrar)

        # cv2.waitKey(0) espera que utilizador pressione qualquer tecla
        # Mant√©m a janela aberta at√© intera√ß√£o do utilizador
        cv2.waitKey(0)

        # cv2.destroyAllWindows() fecha todas as janelas OpenCV abertas
        # Limpa recursos e termina a visualiza√ß√£o
        cv2.destroyAllWindows()