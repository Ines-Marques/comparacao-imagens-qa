import cv2
import os
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas

def guardar_imagem_resultado(imagem, prefixo="resultado", metodo = None, identificador = ""):
    """
    Guarda uma imagem no diret√≥rio 'relatorios/' com timestamp no nome.
    Retorna o caminho completo do ficheiro guardado ou None em caso de erro.
    """
    pasta = "relatorios"
    os.makedirs(pasta, exist_ok=True)

    # Cria o nome de ficheiro com data e hora
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    sufixo_metodo = f"_{metodo}" if metodo else ""
    nome_ficheiro = f"{prefixo}{sufixo_metodo}_{timestamp}_{identificador}.png"
    caminho = os.path.join(pasta, nome_ficheiro)

    # Guarda a imagem
    sucesso = cv2.imwrite(caminho, imagem)

    if sucesso:
        print(f"‚úÖ Imagem de resultado guardada em: {caminho}")
        return caminho
    else:
        print(f"‚ùå Falha ao guardar a imagem de resultado em: {caminho}")
        return None

def gerar_observacoes(metodo, metricas):
    """Gera uma observa√ß√£o textual autom√°tica com base nas m√©tricas."""
    if metodo == "histograma":
        correlacao = metricas.get("correlacao_histogramas", 0)
        if correlacao > 0.98:
            return "OK As imagens apresentam elevada semelhan√ßa de histograma."
        elif correlacao > 0.90:
            return "ATEN√á√ÇO As imagens t√™m algumas semelhan√ßas no histograma."
        else:
            return "PERIGO As imagens t√™m histogramas significativamente diferentes."
    elif metodo == "ssim":
        ssim_score = metricas.get("indice_ssim", 0)
        if ssim_score > 0.98:
            return "OK As imagens s√£o estruturalmente quase id√™nticas."
        elif ssim_score > 0.90:
            return "ATEN√á√ÇO As imagens apresentam alguma semelhan√ßa estrutural."
        else:
            return "PERIGO Diferen√ßas estruturais vis√≠veis entre as imagens."
    elif metodo == "absdiff":
        percent = metricas.get("percentagem_diferenca", 0)
        if percent < 2:
            return "OK As imagens s√£o praticamente id√™nticas."
        elif percent < 10:
            return "ATEN√á√ÉO Diferen√ßas leves detetadas entre as imagens."
        else:
            return "PERIGO Diferen√ßas significativas detetadas entre as imagens."
    return "-"

def gerar_relatorio_pdf_multimetodo(img_ref_path, img_teste_path, resultados, identificador="", duracao_total=None):
    """
    Gera um ficheiro PDF com os dados da compara√ß√£o e as imagens com legendas.
    """
    pasta = "relatorios"
    os.makedirs(pasta, exist_ok=True)

    # Criar nome do ficheiro PDF com timestamp
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    nome_ficheiro = f"relatorio_multimetodo_{timestamp}_{identificador}.pdf"
    caminho = os.path.join(pasta, nome_ficheiro)

    # Iniciar o canvas PDF
    c = canvas.Canvas(caminho, pagesize=A4)
    largura, altura = A4
    margem = 50
    y = altura - margem

    # T√≠tulo
    c.setFont("Helvetica-Bold", 16)
    c.drawString(margem, y, "Relat√≥rio de Compara√ß√£o de Imagens (M√∫ltiplos M√©todos)")
    y -= 30

    # Info b√°sica
    c.setFont("Helvetica", 11)
    c.drawString(margem, y, f"Data/Hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    y -= 20
    c.drawString(margem, y, f"ID do Relat√≥rio: {identificador}")
    y -= 20
    if duracao_total is not None:
        c.drawString(margem, y, f"Tempo de Execu√ß√£o: {duracao_total:.2f} segundos")
        y -= 20
    c.drawString(margem, y, f"Imagem de Refer√™ncia: {img_ref_path}")
    y -= 20
    c.drawString(margem, y, f"Imagem de Teste:      {img_teste_path}")
    y -= 20
    y -= 10

    # Mostrar imagens de refer√™ncia e teste
    imagens_base = [
        ("Imagem de Refer√™ncia", img_ref_path),
        ("Imagem de Teste", img_teste_path)
    ]

    for label, path in imagens_base:
        c.setFont("Helvetica-Bold", 12)
        c.drawCentredString(largura / 2, y, label)
        y -= 20

        imagem_largura = 400
        imagem_altura = 400

        # Confirma se h√° espa√ßo suficiente antes de desenhar a imagem
        if y < imagem_altura + 50:
            c.showPage()
            y = altura - margem

        # Centra horizontalmente
        try:
            x_centrada = (largura - imagem_largura) / 2
            c.drawImage(path, x_centrada, y - imagem_altura, width=imagem_largura, height=imagem_altura,
                        preserveAspectRatio=True)

        except Exception as e:
            c.setFont("Helvetica", 10)
            c.drawString(margem, y - 20, f"‚ö†Ô∏è Erro ao carregar imagem: {e}")

        y -= imagem_altura + 10

        if y < 200:
            c.showPage()
            y = altura - margem

        # Separador visual
    c.setFont("Helvetica-Bold", 14)
    c.drawString(margem, y, "Resultados por M√©todo de An√°lise")
    y -= 30

    for resultado in resultados:
        metodo = resultado["metodo"]
        tipo_analise = resultado["tipo_analise"]
        metricas = resultado["metricas"]
        img_resultado_path = resultado["imagem_resultado"]
        duracao = resultado["duracao"]

        c.setFont("Helvetica-Bold", 14)
        c.drawString(margem, y, f"M√©todo: {tipo_analise}")
        y -= 25

        c.setFont("Helvetica", 11)
        num_diferencas = metricas.get("num_diferencas")
        if num_diferencas is not None:
            c.drawString(margem, y, f"N√∫mero de diferen√ßas detetadas: {num_diferencas}")
            y -= 20
        else:
            c.drawString(margem, y, "N√∫mero de diferen√ßas detetadas: n/a")
            y -= 20

        if "pixels_diferentes" in metricas and "total_pixels" in metricas:
            percentagem = metricas.get("percentagem_diferenca", 0.0)
            c.drawString(margem, y,
                         f"Pixels diferentes: {metricas['pixels_diferentes']} / {metricas['total_pixels']} ({percentagem:.2f}%)")
            y -= 20
        elif metodo in ["histograma", "ssim"]:
            c.drawString(margem, y, "Pixels diferentes: n/a")
            y -= 20

        if metodo == "histograma" and "correlacao_histogramas" in metricas:
            c.drawString(margem, y, f"Correla√ß√£o dos Histogramas: {metricas['correlacao_histogramas']:.4f} (mais pr√≥ximo de 1 indica maior semelhan√ßa)")
            y -= 20
        elif metodo == "ssim" and "indice_ssim" in metricas:
            c.drawString(margem, y, f"√çndice SSIM: {metricas['indice_ssim']:.4f} (mais pr√≥ximo de 1 indica maior semelhan√ßa estrutural)")
            y -= 20
            y -= 10

        # Gerar observa√ß√£o autom√°tica
        observacao = gerar_observacoes(metodo, {**metricas, **metricas})
        c.setFont("Helvetica-Oblique", 11)
        c.drawString(margem, y, f"Observa√ß√£o: {observacao}")
        y -= 30

        # Apenas para m√©todos com resultado visual (absdiff e ssim), incluir imagem de diferen√ßas
        if metodo in ["absdiff", "ssim"] and img_resultado_path:
            c.setFont("Helvetica", 10)
            c.drawString(margem, y, f"Imagem de Resultado: {img_resultado_path}")
            y -= 30

            c.setFont("Helvetica-Bold", 12)
            c.drawCentredString(largura / 2, y, "Resultado com Diferen√ßas")
            y -= 20

            # Se n√£o houver espa√ßo suficiente na p√°gina, cria uma nova
            if y < 320:
                c.showPage()
                y = altura - margem

            try:
                # Dimens√µes e centraliza√ß√£o horizontal da imagem
                imagem_largura = 400
                imagem_altura = 400
                x_centrada = (largura - imagem_largura) / 2
                c.drawImage(img_resultado_path, x_centrada, y - imagem_altura,
                            width=imagem_largura, height=imagem_altura, preserveAspectRatio=True)
            except Exception as e:
                c.setFont("Helvetica", 10)
                c.drawString(margem, y - 20, f"‚ö†Ô∏è Erro ao carregar imagem: {e}")

            # Ajuste de Y ap√≥s a imagem
            y -= imagem_altura + 30

            # Confirma se ainda h√° espa√ßo na p√°gina
            if y < 200:
                c.showPage()
                y = altura - margem

        y -= 10

        # Se acabar a p√°gina, cria uma nova
        if y < 200:
            c.showPage()
            y = altura - margem

    # Finalizar o PDF
    c.save()
    print(f"üìù PDF gerado com sucesso: {caminho}")