import cv2

# Para an√°lise SSIM
from skimage.metrics import structural_similarity as ssim

def analisar_diferencas(img_ref, img_teste, metodo="absdiff"):
    """
    Executa uma an√°lise de diferen√ßas entre duas imagens com base no m√©todo indicado.
    Retorna:
    - imagem com diferen√ßas destacadas
    - descri√ß√£o do tipo de an√°lise
    - dicion√°rio com m√©tricas
    """
    # Par√¢metros visuais comuns
    cor = (0, 0, 255)  # Cor para realce das diferen√ßas (vermelho)
    alpha = 0.7        # Transpar√™ncia do overlay

    if metodo == "absdiff":
        tipo_analise = "Diferen√ßa Absoluta de Pixels (AbsDiff)"

        # Calcular diferen√ßa absoluta entre imagens
        diff = cv2.absdiff(img_ref, img_teste)
        gray_diff = cv2.cvtColor(diff, cv2.COLOR_BGR2GRAY)

        # Definir o limiar de diferen√ßa (quanto menor, mais sens√≠vel √† varia√ß√£o de p√≠xels)
        limiar_diferenca = 10

        # Aplicar threshold ao mapa de diferen√ßas para encontrar altera√ß√µes
        _, mask = cv2.threshold(gray_diff, limiar_diferenca, 255, cv2.THRESH_BINARY)

        # Calcular m√©tricas de diferen√ßa
        total_pixels = mask.size
        pixels_diferentes = cv2.countNonZero(mask)
        percentagem_diferenca = (pixels_diferentes / total_pixels) * 100
        print(f"üßÆ {pixels_diferentes} pixels diferentes de {total_pixels} ({percentagem_diferenca:.2f}%)")

        # Encontrar contornos nas √°reas diferentes
        contornos, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        print(f"üîç {len(contornos)} regi√µes com diferen√ßas detetadas")

        # Criar imagem de resultado com overlay vermelho nas diferen√ßas
        img_resultado = img_teste.copy()
        overlay = img_resultado.copy()
        for contorno in contornos:
            cv2.drawContours(overlay, [contorno], -1, cor, thickness=cv2.FILLED)
        cv2.addWeighted(overlay, 0.7, img_resultado, 1 - alpha, 0, img_resultado)

        metricas = {
            "num_diferencas": len(contornos),
            "total_pixels": total_pixels,
            "pixels_diferentes": pixels_diferentes,
            "percentagem_diferenca": percentagem_diferenca
        }
        return img_resultado, tipo_analise, metricas

    elif metodo == "histograma":
        tipo_analise = "Compara√ß√£o de Histograma (Correla√ß√£o)"

        # Converter imagens para escala de cinzentos
        gray_ref = cv2.cvtColor(img_ref, cv2.COLOR_BGR2GRAY)
        gray_teste = cv2.cvtColor(img_teste, cv2.COLOR_BGR2GRAY)

        # Calcular histogramas
        hist_ref = cv2.calcHist([gray_ref], [0], None, [256], [0, 256])
        hist_teste = cv2.calcHist([gray_teste], [0], None, [256], [0, 256])

        # Normalizar e comparar os histogramas
        hist_ref = cv2.normalize(hist_ref, hist_ref).flatten()
        hist_teste = cv2.normalize(hist_teste, hist_teste).flatten()
        score = cv2.compareHist(hist_ref, hist_teste, cv2.HISTCMP_CORREL)

        # Neste m√©todo n√£o h√° uma imagem com diferen√ßas, por isso devolvemos a imagem original sem diferen√ßas visuais
        img_resultado = img_teste.copy()

        metricas = {
            "correlacao_histogramas": score,
            "num_diferencas": None
        }
        return img_resultado, tipo_analise, metricas

    elif metodo == "ssim":
        tipo_analise = "√çndice de Similaridade Estrutural (SSIM)"

        # Converter imagens para escala de cinzentos
        gray_ref = cv2.cvtColor(img_ref, cv2.COLOR_BGR2GRAY)
        gray_teste = cv2.cvtColor(img_teste, cv2.COLOR_BGR2GRAY)

        # Calcular SSIM e mapa de diferen√ßas
        score, diff = ssim(gray_ref, gray_teste, full=True)
        diff = (diff * 255).astype("uint8")

        # Definir o limiar de similaridade (valores mais baixos indicam maiores diferen√ßas)
        # Isolar o que estiver abaixo deste valor
        # O mapa de diferen√ßas SSIM tem valores de 0 (completamente diferente) a 1 (id√™ntico),
        # mas aqui est√° escalado para 0‚Äì255. Um valor de 220 ‚âà 0.86.
        # Com THRESH_BINARY_INV, destacamos p√≠xels com baixa similaridade (abaixo de 220).
        limiar_similaridade = 220

        # Aplicar threshold ao mapa de diferen√ßas para encontrar altera√ß√µes
        _, mask = cv2.threshold(diff, limiar_similaridade, 255, cv2.THRESH_BINARY_INV)

        # Encontrar contornos nas √°reas diferentes
        contornos, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        print(f"üîç {len(contornos)} regi√µes com diferen√ßas detetadas")

        # Criar imagem de resultado com overlay vermelho nas diferen√ßas
        img_resultado = img_teste.copy()
        overlay = img_resultado.copy()
        for contorno in contornos:
            cv2.drawContours(overlay, [contorno], -1, cor, thickness=cv2.FILLED)
        cv2.addWeighted(overlay, 0.7, img_resultado, 1 - alpha, 0, img_resultado)

        metricas = {
            "indice_ssim": score,
            "num_diferencas": len(contornos)
        }
        return img_resultado, tipo_analise, metricas

    else:
        raise ValueError(f"M√©todo de an√°lise desconhecido: {metodo}")