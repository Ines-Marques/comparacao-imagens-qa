import cv2  # OpenCV para manipula√ß√£o de imagens (diferen√ßas, histogramas, contornos)

# Para an√°lise SSIM
from skimage.metrics import structural_similarity as ssim

def analisar_diferencas(img_ref, img_teste, metodo="absdiff"):
    """
    Compara duas imagens utilizando o m√©todo escolhido e retorna an√°lise detalhada.

    Esta fun√ß√£o √© o n√∫cleo do sistema de compara√ß√£o, com tr√™s m√©todos Dispon√≠veis:
    - "absdiff": Diferen√ßa absoluta pixel-a-pixel, ideal para detetar altera√ß√µes pontuais
    - "histograma": Compara distribui√ß√£o de intensidades, √∫til para mudan√ßas globais de cor/brilho
    - "ssim": √çndice de Similaridade Estrutural, com foco em mudan√ßas na estrutura da imagem

    Par√¢metros:
        img_ref: Imagem de refer√™ncia
        img_teste: Imagem de teste a comparar
        metodo: M√©todo de an√°lise a aplicar (string)

    Retorna:
        tuple: (imagem_resultado, tipo_analise, metricas)
            - imagem_resultado: Imagem com diferen√ßas destacadas visualmente
            - tipo_analise: Descri√ß√£o em texto do m√©todo usado
            - metricas: Dicion√°rio com valores quantitativos da an√°lise
    """

    # Par√¢metros para destacar diferen√ßas visualmente em todos os m√©todos
    cor = (0, 0, 255)  # Cor para realce das diferen√ßas (vermelho)
    alpha = 0.7        # Transpar√™ncia do overlay (0.0=transparente, 1.0=opaco)

    # M√©todo 1: diferen√ßa absoluta de pixels (absdiff)
    if metodo == "absdiff":
        tipo_analise = "Diferen√ßa Absoluta de Pixels (AbsDiff)"

        # Calcula a diferen√ßa absoluta entre as duas imagens pixel a pixel
        # Resultado: imagem onde cada pixel = |pixel_ref - pixel_teste|
        diff = cv2.absdiff(img_ref, img_teste)

        # Converte para escala de cinzentos para facilitar a an√°lise de threshold
        # Necess√°rio porque trabalhamos com uma √∫nica intensidade por pixel
        gray_diff = cv2.cvtColor(diff, cv2.COLOR_BGR2GRAY)

        # Define o limiar de sensibilidade para considerar uma diferen√ßa significativa
        # Valores baixos (ex: 5) = mais sens√≠vel, deteta varia√ß√µes pequenas
        # Valores altos (ex: 30) = menos sens√≠vel, s√≥ deteta altera√ß√µes √≥bvias
        limiar_diferenca = 10

        # Aplica threshold bin√°rio para criar m√°scara de diferen√ßas
        # Pixels com diferen√ßa > limiar_diferenca ficam brancos (255)
        # Pixels com diferen√ßa <= limiar_diferenca ficam pretos (0)
        _, mask = cv2.threshold(gray_diff, limiar_diferenca, 255, cv2.THRESH_BINARY)

        # Conta o n√∫mero total de pixels na imagem (largura √ó altura)
        total_pixels = mask.size

        # Conta pixels brancos na m√°scara (pixels diferentes)
        pixels_diferentes = cv2.countNonZero(mask)

        # Calcula percentagem de pixels que s√£o diferentes
        percentagem_diferenca = (pixels_diferentes / total_pixels) * 100
        print(f"üßÆ {pixels_diferentes} pixels diferentes de {total_pixels} ({percentagem_diferenca:.2f}%)")

        # Encontra contornos das regi√µes diferentes com a m√°scara bin√°ria
        # RETR_EXTERNAL: s√≥ contornos externos (n√£o contornos dentro de outros)
        # CHAIN_APPROX_SIMPLE: comprime contornos e remove pontos redundantes
        contornos, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        print(f"üîç {len(contornos)} regi√µes com diferen√ßas detetadas")

        # Cria c√≥pia da imagem de teste para desenhar as diferen√ßas
        img_resultado = img_teste.copy()
        overlay = img_resultado.copy()

        # Desenha cada contorno preenchido na cor vermelha
        for contorno in contornos:
            cv2.drawContours(overlay, [contorno], -1, cor, thickness=cv2.FILLED)

        # Combina overlay com imagem original e utilizando transpar√™ncia
        # F√≥rmula: resultado = (overlay * alpha) + (original * (1-alpha))
        cv2.addWeighted(overlay, 0.7, img_resultado, 1 - alpha, 0, img_resultado)

        # M√©tricas a retornar
        metricas = {
            "num_diferencas": len(contornos),                   # N√∫mero de regi√µes diferentes
            "total_pixels": total_pixels,                       # Total de pixels na imagem
            "pixels_diferentes": pixels_diferentes,             # Pixels que diferem
            "percentagem_diferenca": percentagem_diferenca      # % de diferen√ßa
        }
        return img_resultado, tipo_analise, metricas

    # M√©todo 2: compara√ß√£o de histograma (correla√ß√£o)
    elif metodo == "histograma":
        tipo_analise = "Compara√ß√£o de Histograma (Correla√ß√£o)"

        # Converte ambas as imagens para a escala de cinzentos
        # Histograma analisa distribui√ß√£o de intensidades, n√£o precisa de cor
        gray_ref = cv2.cvtColor(img_ref, cv2.COLOR_BGR2GRAY)
        gray_teste = cv2.cvtColor(img_teste, cv2.COLOR_BGR2GRAY)

        # Calcula histograma da imagem de refer√™ncia
        hist_ref = cv2.calcHist([gray_ref], [0], None, [256], [0, 256])
        hist_teste = cv2.calcHist([gray_teste], [0], None, [256], [0, 256])

        # Normaliza histogramas para compara√ß√£o
        # Remove influ√™ncia do tamanho total da imagem
        hist_ref = cv2.normalize(hist_ref, hist_ref).flatten()
        hist_teste = cv2.normalize(hist_teste, hist_teste).flatten()

        # Calcula correla√ß√£o entre histogramas usando m√©todo de correla√ß√£o
        # HISTCMP_CORREL: retorna valor entre -1 e 1
        # 1 = correla√ß√£o perfeita (histogramas id√™nticos)
        # 0 = sem correla√ß√£o
        # -1 = correla√ß√£o negativa perfeita
        score = cv2.compareHist(hist_ref, hist_teste, cv2.HISTCMP_CORREL)

        # O m√©todo de histograma n√£o gera imagem de diferen√ßas visuais
        # Retorna imagem original pois a an√°lise √© estat√≠stica, n√£o espacial
        img_resultado = img_teste.copy()

        # M√©tricas espec√≠ficas do m√©todo histograma
        metricas = {
            "correlacao_histogramas": score,
            "num_diferencas": None
        }
        return img_resultado, tipo_analise, metricas

    # M√©todo 3: √≠ndice de similaridade estrutural (SSIM)
    elif metodo == "ssim":
        tipo_analise = "√çndice de Similaridade Estrutural (SSIM)"

        # Converte imagens para escala de cinzentos
        gray_ref = cv2.cvtColor(img_ref, cv2.COLOR_BGR2GRAY)
        gray_teste = cv2.cvtColor(img_teste, cv2.COLOR_BGR2GRAY)

        # Calcula SSIM com mapa completo de diferen√ßas
        # score: valor global de similaridade (0 a 1, onde 1 = id√™ntico)
        # diff: mapa pixel-a-pixel de similaridade estrutural
        # full=True: retorna tanto o score global quanto o mapa detalhado
        score, diff = ssim(gray_ref, gray_teste, full=True)
        diff = (diff * 255).astype("uint8")

        # Define limiar de similaridade estrutural
        # Valores mais baixos no mapa SSIM indicam maiores diferen√ßas estruturais
        # 220/255 ‚âà 0.86 de similaridade m√≠nima aceit√°vel
        limiar_similaridade = 220

        # Aplica threshold invertido (THRESH_BINARY_INV) ao mapa de diferen√ßas para encontrar altera√ß√µes
        # Pixels com similaridade < limiar_similaridade ficam brancos (diferentes)
        # Pixels com similaridade >= limiar_similaridade ficam pretos (similares)
        _, mask = cv2.threshold(diff, limiar_similaridade, 255, cv2.THRESH_BINARY_INV)

        # Encontra contornos das regi√µes com baixa similaridade estrutural
        contornos, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        print(f"üîç {len(contornos)} regi√µes com diferen√ßas detetadas")

        # Cria visualiza√ß√£o com overlay vermelho nas diferen√ßas estruturais
        img_resultado = img_teste.copy()
        overlay = img_resultado.copy()

        # Desenha contornos preenchidos para destacar diferen√ßas estruturais
        for contorno in contornos:
            cv2.drawContours(overlay, [contorno], -1, cor, thickness=cv2.FILLED)

        # Aplica overlay com transpar√™ncia
        cv2.addWeighted(overlay, 0.7, img_resultado, 1 - alpha, 0, img_resultado)

        # M√©tricas espec√≠ficas de SSIM
        metricas = {
            "indice_ssim": score,               # √çndice global de similaridade estrutural
            "num_diferencas": len(contornos)    # N√∫mero de regi√µes com diferen√ßas estruturais
        }
        return img_resultado, tipo_analise, metricas

    else:
        # Exce√ß√£o se m√©todo especificado n√£o for v√°lido
        # Ajuda a detetar erros nos nomes dos m√©todos
        raise ValueError(f"M√©todo de an√°lise desconhecido: {metodo}")